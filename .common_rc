# Profile largely built off of:
#   - https://github.com/nicolashery/mac-dev-setup
#   - https://github.com/gf3/dotfiles

# Add the default install locations for Homebrew and pip --user to `$PATH`
PATH=/usr/local/bin:/usr/local/opt/python/libexec/bin:$PATH
export PATH

# Add hive to our path
PATH=/opt/apache-hive-1.1.0-bin/bin:$PATH
export PATH

# Set up virtualenvwrapper
export WORKON_HOME=$HOME/Envs
source /usr/local/bin/virtualenvwrapper.sh

# Load shell dotfiles
#   - ~/.path can be used to extend `$PATH`
#   - ~/.extra can be used for other settings you don’t want to commit
#   Note: only appears that `exports` is necessary here
for file in ~/.{path,exports,functions,extra}; do
    [ -r "$file" ] && source "$file"
done
unset file

# If holder for sensitive items exists, source it
if [[ -e  $HOME/.bash_sensitive ]] ; then
    source ~/.bash_sensitive
fi

# Set up Cmd + back arrow / forward arrow by going to:
#     Go to iTerm2 > Preferences > Profiles > <your_profile > Keys # Click the + button
#     Enter the key combination Cmd+←
#     For the action, choose ‘Send Escape Sequence’ and enter b
#     Repeat with the key combination Cmd+→ and the escape sequence f

# Color scheme for terminal comes from https://github.com/mbadolato/iTerm2-Color-Schemes/blob/master/schemes/Zenburn.itermcolors
# Set grep to highlight found patterns
export GREP_OPTIONS='--color=always'

# Create shortcuts
export BI=$HOME/repos/business-intelligence/
export BII=$HOME/repos/business-intelligence/pybi/scripts
export DT=$HOME/repos/dotfiles
export A=$HOME/repos/ansible
export P=$HOME/repos/pyline
export POWERLINE_REPO=~/Library/Python/2.7/lib/python/site-packages/powerline
export KUBE_EDITOR=vim

# Set up Cmd + back arrow / forward arrow by going to:
#     Go to iTerm2 > Preferences > Profiles > <your_profile > Keys # Click the + button
#     Enter the key combination Cmd+←
#     For the action, choose ‘Send Escape Sequence’ and enter b
#     Repeat with the key combination Cmd+→ and the escape sequence f

# Color scheme for terminal comes from https://github.com/mbadolato/iTerm2-Color-Schemes/blob/master/schemes/Zenburn.itermcolors
# Set grep to highlight found patterns
export GREP_OPTIONS='--color=always'

# Create shortcuts
export BI=$HOME/repos/business-intelligence/
export BII=$HOME/repos/business-intelligence/pybi/scripts
export DT=$HOME/repos/dotfiles
export A=$HOME/repos/ansible
export P=$HOME/repos/pyline
export POWERLINE_REPO=~/Library/Python/2.7/lib/python/site-packages/powerline
export KUBE_EDITOR=vim

# Stop kubernetes cluster info from showing up by default
export RENDER_POWERLINE_KUBERNETES=NO

export ANSIBLE_VAULT_PASSWORD_FILE=~/.ansible-vault-pw
export TILLER_NAMESPACE=analytics

alias v=/usr/local/bin/vim
alias k=kubectl
alias mktmpenv='mktmpenv -n'

# Always use color output for `ls`
alias ls='ls -lG'
alias lsa='ls -laG'

alias beehive="beeline -n $(whoami) -u 'jdbc:hive2://$HIVE_URI:10000'"

# Create shortcuts for git
alias g='git'
alias gs='git status'
alias gpl='git pull'
alias gps='git push'
alias glo='git log -n 3'
gdi() { git diff $*; }
ga() { git add $*; }
gc() { git commit $*; }
gch() { git checkout $*; }
gbr() { git branch $*; }
gcd() {
    local cdup=$(git rev-parse --show-cdup);
    if [[ $cdup ]] ; then
        cd "$cdup"
    fi
}

# Set upstream quickly; better just to do gch -bt
# to automatically set up tracking though
gbrsu () {
	local branch_name=$(git rev-parse --abbrev-ref HEAD);
	git branch --set-upstream-to=origin/$branch_name $branch_name;
}

tma() { tmux attach -t $1; }
tmn() { tmux new -s $1; }
tmls () { tmux ls; }

docker-ip() { docker inspect --format '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' "$@"; }
alias docker-rmi='docker rmi $(docker images -f "dangling=true" -q)'
alias docker-rmv='docker volume rm $(docker volume ls -f dangling=true -q)'

ksetnsp() { kubectl config set-context $(kubectl config current-context) --namespace=$1; }
kshow() {
	if [[ $RENDER_POWERLINE_KUBERNETES = "NO" ]]; then
		export RENDER_POWERLINE_KUBERNETES=YES
	else
		export RENDER_POWERLINE_KUBERNETES=NO
	fi
}

# Adding this here as I always forget how to install the current kernel into my
# current virtualenv
ipy-kernel-install() {
    if [[ -z $(pip show ipython) ]] ; then
        echo 'ERROR: You must have the ipython library installed'
        return
    fi

    if [[ -z $(pip show jupyter) ]] ; then
        echo 'ERROR: You must have the jupyter library installed'
        return
    fi

    ipython kernel install;
}

open_stash() {
    local repo_name=$(basename `git rev-parse --show-toplevel`);
    local relative_path=$(git rev-parse --show-prefix);
    local branch=$(cat `git rev-parse --show-cdup`.git/HEAD | cut -d' ' -f2 | sed 's#/#%2F#g')

    case $repo_name in
        "ansible") local project=SYSTEMS;;
        "dconn"|"easel"|"gsheets"|"analytics-dqis") local project=STRAT;;
        *) local project=DATA;;
    esac;

    local url="$BASE_STASH_URL/projects/$project/repos/$repo_name/browse/$relative_path$1?at=$branch";
    open "$url";
}
